package vista;

import controlador.LoginController;
import controlador.NominasController;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;
import modelo.Nomina;
import com.aeat.valida.Validador;
import controlador.ExceptionController;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;

import java.sql.SQLException;
import javax.swing.JOptionPane;

/**
 *
 * @author inmar
 */
public class JPanelVerPerfil extends javax.swing.JPanel {

    FileChooser fl = null;
    private String rutaFoto;
    private FileInputStream fileInput;

    /**
     * Creates new form jPanelVerPerfil
     */
    public JPanelVerPerfil() {
        initComponents();
        mostrarPerfil();
        mostraJtable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbDNI = new javax.swing.JLabel();
        lbNombre = new javax.swing.JLabel();
        lbFechaNac = new javax.swing.JLabel();
        lbIDdpto = new javax.swing.JLabel();
        lbFoto = new javax.swing.JLabel();
        lbJefe = new javax.swing.JLabel();
        txtDNI = new javax.swing.JTextField();
        txtNombre = new javax.swing.JTextField();
        txtIDdpto = new javax.swing.JTextField();
        txtJefe = new javax.swing.JTextField();
        btCambiarFoto = new javax.swing.JButton();
        txtGuardar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();
        jDateChooser = new com.toedter.calendar.JDateChooser();

        lbDNI.setText("DNI: ");
        lbDNI.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lbNombre.setText("NOMBRE COMPLETO:");
        lbNombre.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lbFechaNac.setText("FECHA DE NACIMIENTO: ");
        lbFechaNac.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lbIDdpto.setText("ID DEPARTAMENTO: ");
        lbIDdpto.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lbJefe.setText("JEFE: ");
        lbJefe.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        txtNombre.setEditable(false);
        txtNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombreActionPerformed(evt);
            }
        });

        txtIDdpto.setEditable(false);

        txtJefe.setEditable(false);

        btCambiarFoto.setText("Cambiar foto");
        btCambiarFoto.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        btCambiarFoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCambiarFotoActionPerformed(evt);
            }
        });

        txtGuardar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        txtGuardar.setText("GUARDAR");
        txtGuardar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtGuardarActionPerformed(evt);
            }
        });

        jTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btCambiarFoto, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(lbFoto, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(lbNombre)
                        .addGap(39, 39, 39)
                        .addComponent(txtNombre))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbIDdpto)
                            .addComponent(lbFechaNac))
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtIDdpto, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jDateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
                                .addGap(448, 448, 448))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbDNI)
                                .addGap(119, 119, 119)
                                .addComponent(txtDNI, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbJefe)
                                .addGap(115, 115, 115)
                                .addComponent(txtJefe, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(127, 127, 127)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(154, 154, 154))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(txtGuardar)
                                .addGap(342, 342, 342)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lbFoto, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(btCambiarFoto, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDNI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbDNI))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbNombre)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbFechaNac)
                    .addComponent(jDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbIDdpto)
                    .addComponent(txtIDdpto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbJefe)
                    .addComponent(txtJefe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addComponent(txtGuardar)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(47, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombreActionPerformed

    }//GEN-LAST:event_txtNombreActionPerformed

    private void btCambiarFotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCambiarFotoActionPerformed
        Path origen, destino;

        JFileChooser input = new JFileChooser();
        int result = input.showSaveDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            try {
                File file = input.getSelectedFile();
                origen = Paths.get(file.getPath());
                String localPath = System.getProperty("user.dir");
                String destinoPath = "/src/fotos/" + file.getName();
                destino = Paths.get(localPath + destinoPath);
                rutaFoto = destinoPath;
                Files.copy(origen, destino, StandardCopyOption.REPLACE_EXISTING);

                BufferedImage img = null;
                img = ImageIO.read(file);
                Image dimg = img.getScaledInstance(this.lbFoto.getWidth(), lbFoto.getHeight(), Image.SCALE_SMOOTH);
                Icon icon = new ImageIcon(dimg);
                this.lbFoto.setIcon(icon);

                this.fileInput = new FileInputStream(file);
                //LoginController.getAuxTrab().setFoto(TOOL_TIP_TEXT_KEY);

            } catch (IOException ex) {
                Logger.getLogger(JPanelVerPerfil.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (result == JFileChooser.CANCEL_OPTION) {
            System.out.println("Cancel was selected");
        }
    }//GEN-LAST:event_btCambiarFotoActionPerformed


    private void txtGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtGuardarActionPerformed

        String dni = this.txtDNI.getText();
        Validador validador = new Validador();
        int check = validador.checkNif(dni);
        if (check <= 0) {
            JOptionPane.showMessageDialog(null, "DNI Inválido");
        } else {

            java.sql.Date sqldate = new java.sql.Date(jDateChooser.getDate().getTime());
            String consulta = "UPDATE TRABAJADOR SET FOTO = ?, "
                    + "DNI = ?, FECHA_NACIMIENTO = ? WHERE ID = ?";

            System.out.print(consulta);
            LoginController.ejecutaUpdate2(consulta, dni, rutaFoto, sqldate);
            mostrarPerfil();
            /*try {
                    LoginController.loginGetTrabajador(dni, String.valueOf(LoginController.getAuxTrab().getPass()));
                    mostrarPerfil();
                    JOptionPane.showMessageDialog(null, "Guardado correctamente");

                } catch (SQLException ex) {
                    ExceptionController.getError(0, "JPanelVerPerfil.jButton2ActionPerformed()");

                }*/

        }

    }//GEN-LAST:event_txtGuardarActionPerformed

    private void mostrarPerfil() {
        txtDNI.setText(LoginController.getAuxTrab().getDNI() + "");
        txtNombre.setText(LoginController.getAuxTrab().getNombre() + "");
        jDateChooser.setDate(LoginController.getAuxTrab().getFechaNacimeinto());
        txtIDdpto.setText(LoginController.getAuxTrab().getId_dpto() + "");
        txtJefe.setText(LoginController.getAuxTrab().getJefe() + "");


        /*String localPath = System.getProperty("user.dir");
        String destinoPath = LoginController.getAuxTrab().getFoto();
        String rutFoto = localPath + destinoPath;

        File file = new File(rutFoto);

        BufferedImage img = null;
       
            img = ImageIO.read(file);*/
        rutaFoto = LoginController.getAuxTrab().getFoto();

        Image dimg = new ImageIcon(System.getProperty("user.dir") + "/src/fotos/" + this.rutaFoto).getImage();
        ImageIcon icon = new ImageIcon(dimg.getScaledInstance(188, 139, Image.SCALE_SMOOTH));
        this.lbFoto.setIcon(icon);

    }

    /* private static String foto=null;
    
    public void mostrarPerfil(){
        Path origen;
        Path destino;

        JFileChooser fcFoto = new JFileChooser();
        fcFoto.showSaveDialog(null);

        int returnVal = fcFoto.showOpenDialog(null);

        File f = fcFoto.getSelectedFile();
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                origen = Paths.get(f.getPath());
                destino = Paths.get(System.getProperty("user.dir") + "/src/fotos/"
                        + f.getName());
                Files.copy(origen, destino, REPLACE_EXISTING);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Error al guardar la foto");
            }
            
            foto = f.getName();
            
            Image img = new ImageIcon(System.getProperty("user.dir")
                    + "/src/fotos/" + f.getName()).getImage();

            ImageIcon ic = new ImageIcon(img.getScaledInstance(170, 166, Image.SCALE_SMOOTH));

            lbFoto.setIcon(ic);
        } else {
            JOptionPane.showMessageDialog(null, "No has seleccionado ningún archivo");
        }
    }*/
    private void mostraJtable() {

        try {
            String consulta = "SELECT * FROM NOMINA where ID_TRAB= " + LoginController.getAuxTrab().getId();
            String[] registros = new String[4];
            NominasController.crearConsultaNominas(consulta);

            DefaultTableModel model = (DefaultTableModel) this.jTable.getModel();
            /*model.addColumn("ID");
            model.addColumn("SALARIOBASE");
            model.addColumn("ACTIVIDADES");
            model.addColumn("SALARIOTOTAL");*/

            for (Nomina nomina : NominasController.devolverNominas()) {
                registros[0] = String.valueOf(nomina.getId());
                registros[1] = String.valueOf(nomina.getSalarioBase());
                registros[2] = String.valueOf(nomina.getActividades());
                registros[3] = String.valueOf(nomina.getSalarioTotal());

                model.addRow(registros);

            }
            jTable.setModel(model);
        } catch (SQLException ex) {
            ExceptionController.getError(0, "JPanelVerPerfil.mostraJtable()");
        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btCambiarFoto;
    private com.toedter.calendar.JDateChooser jDateChooser;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable;
    private javax.swing.JLabel lbDNI;
    private javax.swing.JLabel lbFechaNac;
    private javax.swing.JLabel lbFoto;
    private javax.swing.JLabel lbIDdpto;
    private javax.swing.JLabel lbJefe;
    private javax.swing.JLabel lbNombre;
    private javax.swing.JTextField txtDNI;
    private javax.swing.JButton txtGuardar;
    private javax.swing.JTextField txtIDdpto;
    private javax.swing.JTextField txtJefe;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables

}
